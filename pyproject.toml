[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "json-ghost-mannequin-pipeline"
version = "1.1.0"
description = "A deterministic 6-phase pipeline that turns garment images into professional ghost-mannequin renders"
readme = "README.md"
authors = [
    {name = "Photostudio.io", email = "dev@photostudio.io"}
]
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["computer-vision", "image-processing", "ghost-mannequin", "fashion", "photography", "stable-diffusion"]

# Core dependencies
dependencies = [
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "scikit-image>=0.21.0",
    "scikit-learn>=1.3.0",
    "jsonschema>=4.17.0",
    "PyYAML>=6.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
# AI/ML generation dependencies
generation = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "diffusers>=0.21.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "controlnet-aux>=0.0.7",
    "xformers>=0.0.20; sys_platform != 'darwin'",  # Skip on macOS due to compatibility
]

# Google Gemini integration
gemini = [
    "google-generativeai>=0.3.0",
]

# Cloud storage and delivery
storage = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
]

# Database support
database = [
    "SQLAlchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",  # PostgreSQL
]

# Background removal and segmentation
segmentation = [
    "rembg>=2.0.50",
    "sam2>=0.1.0; python_version>='3.10'",  # Optional SAM2 support
]

# Image format support
formats = [
    "pillow-avif-plugin>=1.4.0",
    "pillow-heif>=0.11.0",
]

# Development tools
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# All optional dependencies
all = [
    "json-ghost-mannequin-pipeline[generation,gemini,storage,database,segmentation,formats]"
]

[project.urls]
Homepage = "https://photostudio.io"
Repository = "https://github.com/photostudio-io/json-ghost-mannequin-pipeline"
Documentation = "https://docs.photostudio.io/ghost-mannequin"
Issues = "https://github.com/photostudio-io/json-ghost-mannequin-pipeline/issues"

[project.scripts]
# Individual step CLI commands
photostudio-preclean = "photostudio.steps.step0_preclean:main"
photostudio-color-refine = "photostudio.steps.step1_color_refine:main"
photostudio-preprocess = "photostudio.steps.step1_preprocess:main"
photostudio-weave = "photostudio.steps.step2_prompt_weaver:main"
photostudio-render = "photostudio.steps.step3_renderer:main"
photostudio-qa = "photostudio.steps.step4_qa_corrector:main"
photostudio-deliver = "photostudio.steps.step5_delivery_engine:main"
photostudio-feedback = "photostudio.steps.step6_feedback_engine:main"
# Main pipeline runner
photostudio-pipeline = "photostudio.cli:photostudio_pipeline"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
photostudio = ["configs/*.yml", "configs/*.yaml", "templates/*.txt"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=src/photostudio",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
